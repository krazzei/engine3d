###############################################
# Input / Output files
###############################################
outputHeaderFileNamePublic = ../saxLoader/GeneratedSaxParser/include/GeneratedSaxParserColladaParserAutoGen.h
outputHeaderFileNamePrivate = ../saxLoader/GeneratedSaxParser/include/GeneratedSaxParserColladaParserAutoGenPrivate.h
outputSourceFileNamePrivate = ../saxLoader/GeneratedSaxParser/src/GeneratedSaxParserColladaParserAutoGenPrivate.cpp

#outputHeaderFileNamePublic = ../saxLoader/GeneratedSaxParser/include/CAEXParser.h
#outputHeaderFileNamePrivate = ../saxLoader/GeneratedSaxParser/include/CAEXParserPrivate.h
#outputSourceFileNamePrivate = ../saxLoader/GeneratedSaxParser/src/CAEXParserPrivate.cpp
#outputHeaderFileNamePublic = ../saxLoader/GeneratedSaxParser/include/PlcOpenParser.h
#outputHeaderFileNamePrivate = ../saxLoader/GeneratedSaxParser/include/PlcOpenParserPrivate.h
#outputSourceFileNamePrivate = ../saxLoader/GeneratedSaxParser/src/PlcOpenParserPrivate.cpp

#outputHeaderFileNamePublic = ../../opencollada/COLLADASaxFrameworkLoader/include/COLLADASaxFWLColladaParserAutoGen.h
#outputHeaderFileNamePrivate = ../../opencollada/COLLADASaxFrameworkLoader/include/COLLADASaxFWLColladaParserAutoGenPrivate.h
#outputSourceFileNamePrivate = ../../opencollada/COLLADASaxFrameworkLoader/src/COLLADASaxFWLColladaParserAutoGenPrivate.cpp

outputExampleHeaderFileName = ../saxLoader/GeneratedSaxParser/include/ExampleParser.h
outputExampleSourceFileName = ../saxLoader/GeneratedSaxParser/src/ExampleParser.cpp
outputFPrintfHeaderFileName = ../saxLoader/GeneratedSaxParser/include/FPrintfParser.h
outputFPrintfSourceFileName = ../saxLoader/GeneratedSaxParser/src/FPrintfParser.cpp
#outputExampleHeaderFileName = ../saxLoader/GeneratedSaxParser/include/CAEXExampleParser.h
#outputExampleSourceFileName = ../saxLoader/GeneratedSaxParser/src/CAEXExampleParser.cpp
#outputFPrintfHeaderFileName = ../saxLoader/GeneratedSaxParser/include/CAEXFPrintfParser.h
#outputFPrintfSourceFileName = ../saxLoader/GeneratedSaxParser/src/CAEXFPrintfParser.cpp
#outputExampleHeaderFileName = ../saxLoader/GeneratedSaxParser/include/PlcOpenExampleParser.h
#outputExampleSourceFileName = ../saxLoader/GeneratedSaxParser/src/PlcOpenExampleParser.cpp
#outputFPrintfHeaderFileName = ../saxLoader/GeneratedSaxParser/include/PlcOpenFPrintfParser.h
#outputFPrintfSourceFileName = ../saxLoader/GeneratedSaxParser/src/PlcOpenFPrintfParser.cpp

outputCoherencyTestHeaderFileName = ../saxLoader/GeneratedSaxParser/include/CoherencyTestParser14.h
outputCoherencyTestSourceFileName = ../saxLoader/GeneratedSaxParser/src/CoherencyTestParser14.cpp

# AutomationML: COLLADA, CAEX, plc open
inputFile = collada_schema_1_4.xsd
#inputFile = collada_schema_1_5.xsd
#inputFile = CAEX_ClassModel.xsd
#inputFile = tc6_xml_v20.xsd

# test cases
#inputFile = tests/t01.xsd
#inputFile = tests/t02.xsd
#inputFile = tests/t03.xsd
#inputFile = tests/t04.xsd
#inputFile = tests/t05.xsd
#inputFile = tests/unique_attribute_structs/t01.xsd
#inputFile = tests/unique_attribute_structs/t02.xsd
#inputFile = tests/unique_attribute_structs/t03.xsd
#inputFile = tests/unique_attribute_structs/t04.xsd
#inputFile = tests/validation_complex_types/t01.xsd
#inputFile = tests/validation_complex_types/t02.xsd
#inputFile = tests/validation_complex_types/t03.xsd
#inputFile = tests/validation_complex_types/t04.xsd
#inputFile = tests/validation_complex_types/t05.xsd
#inputFile = tests/validation_complex_types/hund_katze_maus.xsd
#inputFile = tests/validation_complex_types/collada_animation.xsd
#inputFile = tests/validation_complex_types/nested_model_group_unbounded.xsd
#inputFile = tests/validation_complex_types/collada_optics.xsd
#inputFile = tests/validation_complex_types/substitution_group.xsd
#inputFile = tests/validation_complex_types/array__bool2.xsd
#inputFile = tests/validation_complex_types/ancestor_type_unique.xsd
#inputFile = tests/validation_simple_types/t01.xsd
#inputFile = tests/validation_simple_types/t02.xsd
#inputFile = tests/validation_simple_types/t03.xsd
#inputFile = tests/validation_simple_types/t04.xsd
#inputFile = tests/validation_simple_types/t05.xsd
#inputFile = tests/collada_effect.xsd
#inputFile = tests/collada_profile_subsgrp.xsd
#inputFile = tests/t06.xsd
#inputFile = tests/t07.xsd
#inputFile = tests/t08.xsd
#inputFile = tests/t09.xsd
#inputFile = tests/t10.xsd
#inputFile = tests/t11.xsd
#inputFile = tests/t12.xsd

# plm xml
#inputFile = plm_xml/PLMXMLSchema.xsd
#inputFile = plm_xml/PLMXMLAnnotationSchema.xsd
#inputFile = plm_xml/PLMXMLBusinessSchema.xsd
#inputFile = plm_xml/PLMXMLClassificationSchema.xsd
#inputFile = plm_xml/PLMXMLConstraintSchema.xsd
#inputFile = plm_xml/PLMXMLDeltaSchema.xsd
#inputFile = plm_xml/PLMXMLFDSchema.xsd
#inputFile = plm_xml/PLMXMLMPMSchema.xsd
#inputFile = plm_xml/PLMXMLMROSchema.xsd
#inputFile = plm_xml/PLMXMLMechatronicsSchema.xsd
#inputFile = plm_xml/PLMXMLMotionSchema.xsd
#inputFile = plm_xml/PLMXMLPDMSchema.xsd
#inputFile = plm_xml/PLMXMLRouteListSchema.xsd
#inputFile = plm_xml/PLMXMLSchedulingSchema.xsd
#inputFile = plm_xml/PLMXMLUGSSchema.xsd
#inputFile = plm_xml/netallied_plm_merge.xsd


rootElementName = COLLADA
#rootElementName = root
#rootElementName = CAEXFile
# PLC open
#rootElementName = project
#rootElementName = PLMXML

namespace = GeneratedSaxParser
#namespace = COLLADASaxFWL
#namespace = CAEXParserNamespace
#namespace = PlcOpenParserNamespace

classNamePrivate = ColladaParserAutoGenPrivate
classNamePublic = ColladaParserAutoGen
#classNamePrivate = CAEXParserPrivate
#classNamePublic = CAEXParser
#classNamePrivate = PlcOpenParserPrivate
#classNamePublic = PlcOpenParser

includePrecompiledHeader = COLLADASaxFWLStableHeaders.h

outFileHeader = /*\n\
\ \ \ \ Copyright (c) 2008-2009 NetAllied Systems GmbH\n\
\n\
\ \ \ \ This file is part of COLLADASaxFrameworkLoader.\n\
\n\
\ \ \ \ Licensed under the MIT Open Source License,\n\
\ \ \ \ for details please see LICENSE file or the website\n\
\ \ \ \ http://www.opensource.org/licenses/mit-license.php\n\
*/\n

###############################################
# referenced config files
###############################################
codeTemplates = code_templates.conf

###############################################
# float / double
###############################################
# float only
treatXsFloatAsCppFloat = true
treatXsDoubleAsCppDouble = false
# double only
#treatXsFloatAsCppFloat = false
#treatXsDoubleAsCppDouble = true

###############################################
# FunctionMapFactory
###############################################
specialFunctionMapsStartElementNamesAllLevels = scene \
                                                library_visual_scenes \
                                                matrix \
                                                input____InputLocal

specialFunctionMapsStartElementNamesOneLevel = COLLADA

###############################################
# patterns
###############################################
#pcreInitialNameCharacters = ([:]|[A-Z]|[_]|[a-z])
#pcreInitialNameCharacters = [:]|[A-Z]|[_]|[a-z]
#pcreInitialNameCharacters = [\\:A-Z\\_a-z]
#pcreInitialNameCharacters = [[:]|[A-Z]|[_]|[a-z]]
#pcreInitialNameCharacters = [[:]+[A-Z]+[_]+[a-z]]
#pcreInitialNameCharacters = [[:][A-Z][_][a-z]]
pcreInitialNameCharacters = ([A-Z]|[_]|[a-z]|[:])
#pcreNameCharacters = (\\i|[-]|[.]|[0-9])
#pcreNameCharacters = ([:]|[A-Z]|[_]|[a-z]|[-]|[.]|[0-9])
#pcreNameCharacters = ([:]|[A-Z]|[_]|[a-z]|[-]|[0-9])
#pcreNameCharacters = \\i\\-\\.0-9
#pcreNameCharacters = [\\i|[-]|[.]|[0-9]]
#pcreNameCharacters = [\\i+[-]+[.]+[0-9]]
#pcreNameCharacters = [\\i[-][.][0-9]]
#pcreNameCharacters = [[:][A-Z][_][a-z][-][.][0-9]]
#pcreNameCharacters = [[:]|[A-Z]|[_]|[a-z]|[-]|[.]|[0-9]]
pcreNameCharacters = ([A-Z]|[_]|[a-z]|[:]|[-]|[.]|[0-9])

pcreInitialNameCharactersWithoutColon = ([A-Z]|[_]|[a-z])
pcreNameCharactersWithoutColon = ([A-Z]|[_]|[a-z]|[-]|[.]|[0-9])
pcreInitialNameCharactersWithoutColonAndDot = ([A-Z]|[_]|[a-z])

###############################################
# name mapping
###############################################
elementNameMapping = 
cppStructMemberNameMapping = operator = _operator; \
        float = _float; \
        typename = _typename; \
        int = _int; \
        bool = _bool; \
        enum = _enum; \
        inline = inline_; \
        class = _class; \
        struct = _struct; \
        return = _return; \
        true = _true; \
        false = _false; \
        union = _union; \
        in = _in; \
        fixed1 = _fixed1; \
        half4x4 = _half4x4; \
        and = _and; \
        or = _or; \
        xor = _xor; \
        not = _not; \
        case = _case;

generateTypeNameMapping = true
userTypeNameMapping = ENUM__AnonymousEnum0 = ENUM__mathml__overflow; \
                      ENUM__AnonymousEnum1 = ENUM__mathml__display; \
                      ENUM__AnonymousEnum2 = ENUM__mathml__cn__type; \
                      ENUM__AnonymousEnum3 = ENUM__mathml__list__order; \
                      ENUM__AnonymousEnum4 = ENUM__mathml__interval__closure; \
                      ENUM__AnonymousEnum5 = ENUM__mathml__declare__occurrence;

xsNamespaceMapping = http://www.w3.org/1998/Math/MathML = mathml; \
                     http://www.collada.org/2005/11/COLLADASchema = COLLADA; \
                     http://www.collada.org/2008/03/COLLADASchema = COLLADA;

###############################################
# example parser and fprintf parser options
###############################################
generateExampleParser = true
generateFprintfParser = true
generateCoherencyTestParser = false
exampleClassName = ExampleParser
exampleNamespace = example
#exampleClassName = CAEXExampleParser
#exampleNamespace = CAEXExampleNamespace
#exampleClassName = PlcOpenExampleParser
#exampleNamespace = PlcOpenExampleNamespace
fPrintfParserNamespace = GeneratedSaxParserTest
fPrintfParserClassName = FprintfParser
#fPrintfParserNamespace = CAEXFprintfParserNamespace
#fPrintfParserClassName = CAEXFprintfParser
#fPrintfParserNamespace = PlcOpenFprintfParserNamespace
#fPrintfParserClassName = PlcOpenFprintfParser
#fPrintfParserNamespace = FprintfParserNamespace

fprintfCtorParas = const char* outputFileName
fprintfParserFileMemberName = outFile
fprintfParserPrintDoubleMethodName = printDouble
fprintfParserPrintFloatMethodName = printFloat
fprintfParserPrintFloatTemplateMethodName = printFloatingPoint
fprintfParserPrintFloatMethodParameterName = value

coherencyTestParserClassName = CoherencyTestParser14
coherencyTestParserNamespace = SaxCoherencyTest
coherencyTestCtorParas = CoherencyTestErrorHandler* errorHandler
coherencyTestErrorHandlerName = mErrorHandler
coherencyTestIdCounterMapName = mIdCounterMap
coherencyTestCountAttributeMemberName = mCountAttribute
coherencyTestListCountMemberName = mListCount
coherencyTestInitializationList = mCountAttribute(0) \
                                  mErrorHandler(errorHandler) \
                                  mListCount(0)

###############################################
# general options
###############################################
builtInTypeMaxValues = sint8 = 127; \
        sint16 = 32767; \
        sint32 = 2147483647; \
        sint64 = 9223372036854775807; \
        uint8 = 255; \
        uint16 = 65535; \
        uint32 = 4294967295; \
        uint64 = 18446744073709551615;

builtInTypeMinValues = sint8 = -128; \
        sint16 = -32768; \
        sint32 = -2147483648; \
        sint64 = -9223372036854775808; \
        uint8 = 0; \
        uint16 = 0; \
        uint32 = 0; \
        uint64 = 0;

includeFilesForEnumsHeader = GeneratedSaxParserTypes.h \
        GeneratedSaxParserUtils.h \
        GeneratedSaxParserParserError.h

includeFilesForEnumsSource = GeneratedSaxParserUtils.h

includeFilesForImpl = GeneratedSaxParserUtils.h

includeFilesForPrivateHeader = GeneratedSaxParserPrerequisites.h \
        GeneratedSaxParserTypes.h \
        GeneratedSaxParserParserTemplate.h \
        pcre.h

anonymousEnumPrefix = AnonymousEnum
anonymousUnionMemberPrefix = AnonymousUnionMember
anonymousUnionPrefix = AnonymousUnion
attributeDataParameterName = attributeData
attributePresentMaskType = static const uint32
attributesPresentMemberName = present_attributes
attributesPresentMemberType = uint32
attributeStructDefaultMemberName = DEFAULT
attributeStructSuffix = __AttributeData
baseClassNamespace = GeneratedSaxParser
baseClassTemplateName = ParserTemplate
beginMethodPrefix = begin__
classNameFunctionMapFactory = FunctionMapFactory

complexValidationDataParentStructVariableName = parentValidationData
complexValidationDataStateMachineStructMemberType = size_t
complexValidationDataStructVariableName = validationData
complexValidationStateMachineStructMember = validation_current_state
convenienceDataMethodLengthParameterName = length
convenienceDataMethodValueParameterName = value
cppEnumTypePrefix = ENUM__
cppUnionTypePrefix = UNION__
elementNameDelimiter = __
endMethodPrefix = end__
enumCountName = COUNT
enumFuncPrefixCharData = characterData2EnumData_
enumFuncPrefixDataEnd = dataEnumEnd_
enumFuncPrefixDataPrefix = toEnumDataPrefix_
enumFuncPrefixToEnum = toEnum_
enumMapNameSuffix = Map
enumMapPairType = std::pair
enumNotPresentName = NOT_PRESENT
enumTypeNameMappingFile = enum_names.txt
indentation = \ \ \ \ 
maxTemplateResolvingIterations = 50
outputAttributesFileSuffix = Attributes
outputEnumsFileSuffix = Enums
outputFindElementHashFileSuffix = FindElementHash
outputFunctionMapFactoryFileSuffix = FunctionMapFactory
outputFunctionMapFileSuffix = FunctionMap
outputNameMapFileSuffix = NameMap
outputValidationFileSuffix = Validation
outputSourceFileMethodDelimiter = //---------------------------------------------------------------------
outputValidationDataFileSuffix = ValidationData
publicImplMember = mImpl
simpleTypeDefaultCpp = const ParserChar*
simpleValidationFunctionLengthParameterName = length
simpleValidationFunctionLengthParameterType = size_t
simpleValidationFunctionPrefix = validate__
simpleValidationFunctionReturnType = ParserError::ErrorType
simpleValidationFunctionStreamEndSuffix = __streamEnd
simpleValidationFunctionStreamSuffix = __stream
simpleValidationFunctionValueParameterName = value
simpleValidationStreamCountStructMember = validationWholeSize
stringListItemValidationFunctionParameter = ParserString
typedAttributeDataVariableName = typedAttributeData
typeNameMappingSeparator = ,\ 
unionDataMemberName = union_data
unionFuncPrefixToUnion = toUnion_
unionFuncPrefixToUnionPrefix = toUnionPrefix_
unionInvalidTypeName = INVALID
unionMemberTypeConversionFunctionParameters = (const ParserChar**)&tmpBuf, (const ParserChar*)(buffer+length), failed
unionTypeMemberName = union_type
unknownAttributeType = const ParserChar*
unknownAttributesMemberType = GeneratedSaxParser::XSList<const ParserChar*>
unknownAttributesMemberName = unknownAttributes
unknownAttributesMemberInit = GeneratedSaxParser::XSList<const ParserChar*>()
validationDataStructMemberType = size_t
validationDataStructSuffix = __ValidationData
wildcardValidationDataStructName = _wildcard
xsNamespace = http://www.w3.org/2001/XMLSchema
