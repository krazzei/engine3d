AttributeAtomicConversion = #pre_attr_atomic_xsd2cpp##nl#\
#attr_atomic_xsd2cpp##nl#\
#post_attr_atomic_xsd2cpp#\
#attr_present_set#

AttributeCheckRequiredPresent = if ( #attr_not_present_check# )#nl#\
{#nl#\
#ind#if ( handleError ( ParserError::SEVERITY_ERROR_NONCRITICAL, ParserError::ERROR_REQUIRED_ATTRIBUTE_MISSING, #elementNameHash#, #attrNameHash#, 0 ) )#nl#\
#ind##ind#return false;#nl#\
}#nl#

AttributeInitObject = if (#attr_not_present_check#)#nl#\
{#nl#\
#ind##attr_init_object##nl#\
#attr_init_object_set_present#\
}#nl#

AttributeInitObjectNoDefaultLHS = attributeData->#attrName# = 

AttributeInitObjectUnionDefault = #union_func_to_union#(#attr_init_object_default_val#, #attr_init_object_default_val_length#, failed);

AttributeInitObjectUnionPreDefault = bool failed;#nl##ind#

AttributeListConversion = #pre_attr_list_xsd2cpp##nl#\
#validation_block_open#\
#attr_list_xsd2cpp_item_vali##nl#\
#validation_block_else_runtime#\
#attr_list_xsd2cpp##nl#\
#validation_block_else_compiletime#\
#attr_list_xsd2cpp##nl#\
#validation_block_close#\
#post_attr_list_xsd2cpp##nl#\
#attr_present_set#

AttributeNotPresentCheck = (attributeData->#attr_present_member# & #attr_struct_name#::#attr_present_mask#) == 0

AttributePresentCheck = (attributeData.#attr_present_member# & #attr_struct_name#::#attr_present_mask#) == #attr_struct_name#::#attr_present_mask#

AttributePresentCheckStringAtomic = !attributeData->#attrName#

AttributePresentCheckEnumAtomic = attributeData->#attrName# == #enum_value_not_present#

AttributePresentSet = if ( !failed )#nl#\
#ind#attributeData->#attr_present_member# |= #attr_struct_name#::#attr_present_mask#;#nl#

CoherencyTestCheckIdUnique = #ind#// check if IDs are unique#nl#\
#ind#if ( attributeData.#attrName# )#nl#\
#ind#{#nl#\
#ind##ind#String id( attributeData.#attrName# );#nl#\
#ind##ind#if ( #cht_id_counter_map#.find( id ) == #cht_id_counter_map#.end() )#nl#\
#ind##ind#{#nl#\
#ind##ind##ind##cht_id_counter_map#[ id ] = 1;#nl#\
#ind##ind#}#nl#\
#ind##ind#else#nl#\
#ind##ind#{#nl#\
#ind##ind##ind##cht_id_counter_map#[ id ] = #cht_id_counter_map#[ id ]++;#nl#\
#ind##ind##ind#String errMsg = "ID \\"" + id + "\\" already present!";#nl#\
#ind##ind##ind#if ( #cht_err_handler#->handleCoherenceError( "#elementName#", errMsg.c_str() ) )#nl#\
#ind##ind##ind#{#nl#\
#ind##ind##ind##ind#return false;#nl#\
#ind##ind##ind#}#nl#\
#ind##ind#}#nl#\
#ind#}#nl#

CoherencyTestSimpleCountCheckBegin = #ind##cht_count_attr# = attributeData.#attrName#;#nl#

CoherencyTestSimpleCountCheckData = #ind##cht_list_count# += length;#nl#

CoherencyTestSimpleCountCheckEnd = #ind#if ( #cht_count_attr# != #cht_list_count# )#nl#\
#ind#{#nl#\
#ind##ind#std::stringstream errMsg;#nl#\
#ind##ind#errMsg << "count attribute (" << #cht_count_attr# << ") and list length (" << #cht_list_count# << ") don't match!";#nl#\
#ind##ind#if ( #cht_err_handler#->handleCoherenceError( "#elementName#", errMsg.str().c_str() ) )#nl#\
#ind##ind#{#nl#\
#ind##ind##ind#return false;#nl#\
#ind##ind#}#nl#\
#ind#}#nl#\
#ind##cht_count_attr# = 0;#nl#\
#ind##cht_list_count# = 0;#nl#

ComplexValidationBlockClose = #ind#} // validation#nl#\
#endif#nl#

ComplexValidationBlockElseCompileTime = #ind#}#nl#\
#else#nl#\
#ind#{#nl#

ComplexValidationBlockElseRunTime = #ind#}#nl#\
#ind#else#nl#\
#ind#{#nl#

ComplexValidationBlockOpen = #ifdef GENERATEDSAXPARSER_VALIDATION#nl#\
#ind#if ( mValidate )#nl#\
#ind#{#nl#

ComplexValidationBlockOpenCompileTimeOnly = #ifdef GENERATEDSAXPARSER_VALIDATION
ComplexValidationBlockCloseCompileTimeOnly = #endif

ComplexValidationCheckMaxOccurence = #ind##ind#if ( #ctv_parent_data_struct_name#->#ctv_data_member# >= #ctv_max_occurence# ) // maxOccurs#nl#\
#ind##ind#{#nl#\
#ind##ind##ind#if ( handleError ( ParserError::SEVERITY_ERROR_NONCRITICAL, ParserError::ERROR_VALIDATION_MAX_OCCURS_EXCEEDED, #elementNameHash#, (const ParserChar*)0, 0 ) )#nl#\
#ind##ind##ind##ind#return false;#nl#\
#ind##ind#}#nl#

ComplexValidationCheckMinOccurencOfChildren = #ind##ind#if ( #ctv_data_struct_name#->#ctv_sibling_member# < #ctv_min_occurence# ) // children minOccurs#nl#\
#ind##ind#{#nl#\
#ind##ind##ind#if ( handleError ( ParserError::SEVERITY_ERROR_NONCRITICAL, ParserError::ERROR_VALIDATION_MIN_OCCURS_UNMATCHED, #elementNameHash#, (const ParserChar*)0, \"child: #ctv_sibling_name#\" ) )#nl#\
#ind##ind##ind##ind#return false;#nl#\
#ind##ind#}#nl#

ComplexValidationCheckStateMachine = #ind##ind#if ( !( #ctv_check_state_machine_per_state# ) )#nl#\
#ind##ind#{#nl#\
#ind##ind##ind#if ( handleError(ParserError::SEVERITY_ERROR_NONCRITICAL, ParserError::ERROR_VALIDATION_UNEXPECTED_ELEMENT, #elementNameHash#, (const ParserChar*)0, 0) )#nl#\
#ind##ind##ind##ind#return false;#nl#\
#ind##ind#}#nl#

ComplexValidationCheckStateMachineEnd = #ind##ind#if ( !( #ctv_check_state_machine_end_per_state# ) )#nl#\
#ind##ind#{#nl#\
#ind##ind##ind#if ( handleError( ParserError::SEVERITY_ERROR_NONCRITICAL, ParserError::ERROR_VALIDATION_UNEXPECTED_CLOSING_TAG, #elementNameHash#, (const ParserChar*)0, 0) )#nl#\
#ind##ind##ind##ind#return false;#nl#\
#ind##ind#}#nl#

ComplexValidationCheckStateMachineEndPerState = (#ctv_data_struct_name#->#ctv_struct_state_member# == #ctv_prev_state#)

ComplexValidationCheckStateMachinePerState = (#ctv_parent_data_struct_name#->#ctv_struct_state_member# == #ctv_prev_state#)

ComplexValidationChildValidateBegin = #ctv_get_parent_vali_data#\
#ctv_check_siblings#\
#ctv_check_maxOccurence#\
#ctv_increment_occurence#

ComplexValidationChildValidateBeginNestedModelGroup = #ctv_get_parent_vali_data#\
#ctv_check_state_machine#\
#ind##ind#else#nl#\
#ind##ind#{#nl#\
#ind##ctv_set_state_machine_state#\
#ind##ind#}#nl#\
//#ctv_increment_occurence#

ComplexValidationChoiceCheckMinOccurencOfChildren = #ind##ind#if ( #ctv_data_struct_name#->#ctv_sibling_member# != 0 )#nl#\
#ind##ind##ind#if ( #ctv_data_struct_name#->#ctv_sibling_member# < #ctv_min_occurence# ) // children minOccurs#nl#\
#ind##ind##ind##ind#if ( handleError ( ParserError::SEVERITY_ERROR_NONCRITICAL, ParserError::ERROR_VALIDATION_MIN_OCCURS_UNMATCHED, #elementNameHash#, (const ParserChar*)0, \"child: #ctv_sibling_name#\" ) )#nl#\
#ind##ind##ind##ind##ind#return false;#nl#

ComplexValidationChoiceCheckOneChildPresent = #ind##ind#if ( #ctv_choice_one_child_per_child# ) // no child present#nl#\
#ind##ind##ind#if ( handleError ( ParserError::SEVERITY_ERROR_NONCRITICAL, ParserError::ERROR_VALIDATION_CHOICE_NO_CHILD_PRESENT, #elementNameHash#, (const ParserChar*)0, 0 ) )#nl#\
#ind##ind##ind##ind#return false;#nl#

ComplexValidationChoiceCheckOneChildPresentPerChild = #ctv_data_struct_name#->#ctv_sibling_member# == 0

ComplexValidationChoiceCheckSiblilngs = #ind##ind#if ( #ctv_parent_data_struct_name#->#ctv_sibling_member# != 0 ) // sibling in choice#nl#\
#ind##ind#{#nl#\
#ind##ind##ind#if ( handleError ( ParserError::SEVERITY_ERROR_NONCRITICAL, ParserError::ERROR_VALIDATION_CHOICE_SIBLING_ALREADY_PRESENT, #elementNameHash#, (const ParserChar*)0, \"sibling: #ctv_sibling_name#\" ) )#nl#\
#ind##ind##ind##ind#return false;#nl#\
#ind##ind#}#nl#

ComplexValidationCreateValidationData = #ind##ind##ctv_data_struct_type#* #ctv_data_struct_name# = (#ctv_data_struct_type#*)mValidationDataStack.newObject(sizeof(#ctv_data_struct_type#));#nl#\
#ind##ind#memset(#ctv_data_struct_name#, 0, sizeof(#ctv_data_struct_type#));#nl#

ComplexValidationDeleteValidationData = #ind##ind#mValidationDataStack.deleteObject();#nl#

ComplexValidationGetTopParentValidationData = #ind##ind##ctv_data_struct_type#* #ctv_parent_data_struct_name# = (#ctv_data_struct_type#*)mValidationDataStack.top();#nl#

ComplexValidationGetTopValidationData = #ind##ind##ctv_data_struct_type#* #ctv_data_struct_name# = (#ctv_data_struct_type#*)mValidationDataStack.top();#nl#\
#ind##ind#DISABLE_WARNING_UNUSED(#ctv_data_struct_name#)#nl#

ComplexValidationIncrementOccurence = #ind##ind##ctv_parent_data_struct_name#->#ctv_data_member#++;#nl#

ComplexValidationInitStateMachine = #ind##ind##ctv_data_struct_name#->#ctv_struct_state_member# = #ctv_start_state#;#nl#

ComplexValidationParentValidateEnd = #ctv_get_vali_data#\
#ctv_check_minOccurence_of_children#

ComplexValidationParentValidateEndNestedModelGroups = #ctv_get_vali_data#\
#ctv_check_state_machine_end#

ComplexValidationSequCheckNext = #ind##ind#if ( #ctv_parent_data_struct_name#->#ctv_sibling_member# != 0 ) // following sibling#nl#\
#ind##ind#{#nl#\
#ind##ind##ind#if ( handleError ( ParserError::SEVERITY_ERROR_NONCRITICAL, ParserError::ERROR_VALIDATION_SEQUENCE_NEXT_SIBLING_ALREADY_PRESENT, #elementNameHash#, (const ParserChar*)0, \"sibling: #ctv_sibling_name#\" ) )#nl#\
#ind##ind##ind##ind#return false;#nl#\
#ind##ind#}#nl#

ComplexValidationSequCheckPrev = #ind##ind#if ( #ctv_parent_data_struct_name#->#ctv_sibling_member# < #ctv_min_occurence# ) // previous sibling minOccurs#nl#\
#ind##ind#{#nl#\
#ind##ind##ind#if ( handleError ( ParserError::SEVERITY_ERROR_NONCRITICAL, ParserError::ERROR_VALIDATION_SEQUENCE_PREVIOUS_SIBLING_NOT_PRESENT, #elementNameHash#, (const ParserChar*)0, \"sibling: #ctv_sibling_name#\" ) )#nl#\
#ind##ind##ind##ind#return false;#nl#\
#ind##ind#}#nl#

ComplexValidationSetStateMachineState = #ind##ind##ctv_parent_data_struct_name#->#ctv_struct_state_member# = #ctv_current_state#;#nl#

DataAtomicConversion = #data_atomic_xsd2cpp#

DataAtomicDataMethod = #data_atomic_data_method_impl#

DataListConversion = #validation_block_open#\
#ctv_get_vali_data#\
#data_list_xsd2cpp_vali##nl#\
#validation_block_else_runtime#\
#data_list_xsd2cpp##nl#\
#validation_block_else_compiletime#\
#data_list_xsd2cpp##nl#\
#validation_block_close#

DataListValidateEnd = #validation_block_open#\
#ctv_get_vali_data#\
#data_list_validate_end_vali##nl#\
#stv_special_stream_end_vali#\
#ctv_delete_vali_data#\
#stv_special_stream_end_vali_handle_error#\
#ind##ind#return returnValue;#nl#\
#validation_block_else_runtime#\
#data_list_validate_end##nl#\
#validation_block_else_compiletime#\
#data_list_validate_end##nl#\
#validation_block_close#

DisableWarningUnused = // disable warning \"unused variable\"#nl#\
#if defined(__INTEL_COMPILER) && !defined(WIN32)#nl#\
template <typename T>#nl#\
inline void disable_warning_unused(T &x) { (void)x; }#nl#\
##ind#define DISABLE_WARNING_UNUSED(x) disable_warning_unused(x);#nl#\
#else#nl#\
##ind#define DISABLE_WARNING_UNUSED(x) (void)x;#nl#\
#endif#nl#

EnumDataAtomicConversion = #pre_data_atomic_xsd2cpp##nl#\
#enum_data_atomic_xsd2cpp##nl#\
#post_data_atomic_xsd2cpp##nl#

EnumFuncCharDataDecl = bool #enum_func_char_data# (#nl#\
#ind#const ParserChar* text,#nl#\
#ind#size_t textLength,#nl#\
#ind#bool ( #className#::*dataFunction )(const #enum_cpp_type_name#*, size_t ),#nl#\
#ind##enum_cpp_base_type# (*baseConversionFunc)( const ParserChar**, const ParserChar*, bool& )#nl#\
);#nl#

EnumFuncCharDataImpl = bool #private_class_name#::#enum_func_char_data# (#nl#\
#ind#const ParserChar* text,#nl#\
#ind#size_t textLength,#nl#\
#ind#bool ( #className#::*dataFunction )(const #enum_cpp_type_name#*, size_t ),#nl#\
#ind##enum_cpp_base_type# (*baseConversionFunc)( const ParserChar**, const ParserChar*, bool& )#nl#\
)#nl#\
{#nl#\
#ind#return characterData2EnumData<#enum_cpp_type_name#, #enum_cpp_base_type#, #enum_count#>(text, textLength, dataFunction, #enum_map_name#, baseConversionFunc, &#enum_func_to_enum#, &#private_class_name#::#enum_func_data_prefix#);#nl#\
}

EnumFuncDataEndDecl = bool #enum_func_data_end# (#nl#\
#ind#bool ( #className#::*dataFunction )(const #enum_cpp_type_name#*, size_t ),#nl#\
#ind#const #enum_map_entry_type#* enumMap,#nl#\
#ind##enum_cpp_base_type# (*baseConversionFunc)( const ParserChar**, const ParserChar*, bool& ),#nl#\
#ind##enum_cpp_type_name# (*toEnumFunc)( const ParserChar**, const ParserChar*, bool&, const #enum_map_entry_type#* enumMap, #enum_cpp_base_type# (*baseConversionFunc)( const ParserChar**, const ParserChar*, bool& ))#nl#\
);#nl#

EnumFuncDataEndImpl = bool #private_class_name#::#enum_func_data_end# (#nl#\
#ind#bool ( #className#::*dataFunction )(const #enum_cpp_type_name#*, size_t ),#nl#\
#ind#const #enum_map_entry_type#* enumMap,#nl#\
#ind##enum_cpp_base_type# (*baseConversionFunc)( const ParserChar**, const ParserChar*, bool& ),#nl#\
#ind##enum_cpp_type_name# (*toEnumFunc)( const ParserChar**, const ParserChar*, bool&, const #enum_map_entry_type#* enumMap, #enum_cpp_base_type# (*baseConversionFunc)( const ParserChar**, const ParserChar*, bool& ))#nl#\
)#nl#\
{#nl#\
#ind#return dataEnumEnd<#enum_cpp_type_name#, #enum_cpp_base_type#, #enum_count#>(dataFunction, enumMap, baseConversionFunc, toEnumFunc);#nl#\
}

EnumFuncDataPrefixDecl = #enum_cpp_type_name# #enum_func_data_prefix# (#nl#\
#ind#const ParserChar* prefixedBuffer,#nl#\
#ind#const ParserChar* prefixedBufferEnd,#nl#\
#ind#const ParserChar** buffer,#nl#\
#ind#const ParserChar* bufferEnd,#nl#\
#ind#bool& failed,#nl#\
#ind#const #enum_map_entry_type#* enumMap,#nl#\
#ind##enum_cpp_base_type# (*baseConversionFunc)( const ParserChar**, const ParserChar*, bool& )#nl#\
);#nl#

EnumFuncDataPrefixImpl = #enum_cpp_type_name# #private_class_name#::#enum_func_data_prefix# (#nl#\
#ind#const ParserChar* prefixedBuffer,#nl#\
#ind#const ParserChar* prefixedBufferEnd,#nl#\
#ind#const ParserChar** buffer,#nl#\
#ind#const ParserChar* bufferEnd,#nl#\
#ind#bool& failed,#nl#\
#ind#const #enum_map_entry_type#* enumMap,#nl#\
#ind##enum_cpp_base_type# (*baseConversionFunc)( const ParserChar**, const ParserChar*, bool& )#nl#\
)#nl#\
{#nl#\
#ind#return toEnumDataPrefix<#enum_cpp_type_name#, #enum_cpp_base_type#, #enum_count#, &#enum_func_to_enum#>(prefixedBuffer, prefixedBufferEnd, buffer, bufferEnd, failed, enumMap, baseConversionFunc);#nl#\
}

EnumFuncToEnumDecl = #enum_cpp_type_name# #enum_func_to_enum# (#nl#\
#ind#const ParserChar** buffer,#nl#\
#ind#const ParserChar* bufferEnd,#nl#\
#ind#bool& failed,#nl#\
#ind#const #enum_map_entry_type#* enumMap,#nl#\
#ind##enum_cpp_base_type# (*baseConversionFunc)( const ParserChar**, const ParserChar*, bool& )#nl#\
);#nl#

EnumFuncToEnumImpl = #enum_cpp_type_name# #enum_func_to_enum# (#nl#\
#ind#const ParserChar** buffer,#nl#\
#ind#const ParserChar* bufferEnd,#nl#\
#ind#bool& failed,#nl#\
#ind#const #enum_map_entry_type#* enumMap,#nl#\
#ind##enum_cpp_base_type# (*baseConversionFunc)( const ParserChar**, const ParserChar*, bool& )#nl#\
)#nl#\
{#nl#\
#ind#return Utils::toEnum<#enum_cpp_type_name#, #enum_cpp_base_type#, #enum_count#>(buffer, bufferEnd, failed, enumMap, baseConversionFunc);#nl#\
}#nl#

EnumMapDeclaration = extern const #enum_map_entry_type# #enum_map_name#[#enum_count#];

EnumMapDefinitionStart = const #enum_map_entry_type# #enum_map_name#[#enum_count#] =\ 

EnumMapEntry = #ind##enum_map_entry_type#(#enum_base_type_value#, #enum_value#)

EnumMapEntryType = #enum_map_pair_type#<#enum_cpp_base_type#, #enum_cpp_type_name#>

FindHashSetValues = #ind##ind##ind##ind#elementData.typeID = #findhash_typeid#;#nl#\
#ind##ind##ind##ind#elementData.generatedElementHash = #findhash_generated_hash_value#;#nl#

FprintfCloseFile = #ind#fclose(outFile);

FprintfOpenFile = #ind#outFile = fopen(outputFileName, \"w\");

FprintfPrintDouble = #ind##fprintfParserPrintFloatTemplateMethodName#<double>( #fprintfParserPrintFloatMethodParameterName# );#nl#

FprintfPrintFloat = #ind##fprintfParserPrintFloatTemplateMethodName#<float>( #fprintfParserPrintFloatMethodParameterName# );#nl#

FprintfPrintFloatTemplate = #ind#if ( Utils::isInf( #fprintfParserPrintFloatMethodParameterName# ) )#nl#\
#ind#{#nl#\
#ind##ind#fprintf(#fPrintfParserFileMemberName#, "%s", "INF");#nl#\
#ind#}#nl#\
#ind#else if ( Utils::isNegativeInf( #fprintfParserPrintFloatMethodParameterName# ) )#nl#\
#ind#{#nl#\
#ind##ind#fprintf(#fPrintfParserFileMemberName#, "%s", "-INF");#nl#\
#ind#}#nl#\
#ind#else if ( Utils::isNaN( #fprintfParserPrintFloatMethodParameterName# ) )#nl#\
#ind#{#nl#\
#ind##ind#fprintf(#fPrintfParserFileMemberName#, "%s", "NaN");#nl#\
#ind#}#nl#\
#ind#else#nl#\
#ind#{#nl#\
#ind##ind#fprintf(#fPrintfParserFileMemberName#, "%g", #fprintfParserPrintFloatMethodParameterName#);#nl#\
#ind#}#nl#

FprintfUnknownAttributes = #ind#if ( attributeData.#unknwonAttrName#.data )#nl#\
#ind#{#nl#\
#ind##ind#for (size_t i=0; i<attributeData.#unknwonAttrName#.size; i+=2)#nl#\
#ind##ind#{#nl#\
#ind##ind##ind#fprintf(outFile, \" %s=\\\"%s\\\"\", attributeData.#unknwonAttrName#.data[i], attributeData.#unknwonAttrName#.data[i+1]);#nl#\
#ind##ind#}#nl#\
#ind#}#nl#

FprintfUnknownElementBegin = bool #fPrintfParserClassName#::elementBegin( const ParserChar* elementName, const GeneratedSaxParser::xmlChar** attributes)#nl#\
{#nl#\
#ind#fprintf(outFile, \"<%s\", elementName);#nl#\
#ind#size_t i = 0;#nl#\
#ind#if (attributes)#nl#\
#ind#{#nl#\
#ind##ind#while (attributes[i])#nl#\
#ind##ind#{#nl#\
#ind##ind##ind#if ( i%2 )#nl#\
#ind##ind##ind#{#nl#\
#ind##ind##ind##ind#fprintf(outFile, \"%s\\\"\", attributes[i]);#nl#\
#ind##ind##ind#}#nl#\
#ind##ind##ind#else#nl#\
#ind##ind##ind#{#nl#\
#ind##ind##ind##ind#fprintf(outFile, \" %s=\\\"\", attributes[i]);#nl#\
#ind##ind##ind#}#nl#\
#ind##ind##ind#i++;#nl#\
#ind##ind#}#nl#\
#ind#}#nl#\
#ind#fprintf(outFile, \">\");#nl#\
#ind#return true;#nl#\
}#nl#

FprintfUnknownElementData = bool #fPrintfParserClassName#::textData(const ParserChar* text, size_t textLength)#nl#\
{#nl#\
#ind#for (size_t i=0; i<textLength; ++i)#nl#\
#ind#{#nl#\
#ind##ind#fprintf(outFile, \"%c\", text[i]);#nl#\
#ind#}#nl#\
#ind#return true;#nl#\
}#nl#

FprintfUnknownElementEnd = bool #fPrintfParserClassName#::elementEnd(const ParserChar* elementName)#nl#\
{#nl#\
#ind#fprintf(outFile, \"</%s>\\n\", elementName);#nl#\
#ind#return true;#nl#\
}#nl#

FreeAttrList = #ind#if (#typed_attr_data_var_name#->#attrName#.data)#nl#\
#ind#{#nl#\
#ind##ind#mStackMemoryManager.deleteObject();#nl#\
#ind#}#nl#

FreeAttrStruct = #nl##ind##typed_attr_data_var_name#->~#attr_struct_name#();#nl#

FreeUnknownAttributes = #ind#if (#typed_attr_data_var_name#->#unknwonAttrName#.data)#nl#\
#ind#{#nl#\
#ind##ind#mStackMemoryManager.deleteObject();#nl#\
#ind#}#nl#

ParseAttrDefaultXMLNS = #ind##ind#StringHashPair hashPair = Utils::calculateStringHashWithNamespace( attribute );#nl#\
#ind##ind#if ( hashPair.first != HASH_ATTRIBUTE_xmlns )#nl#\
#ind##ind#{#nl#\
#attr_parsing_switch_default#\
#ind##ind#}#nl#\
#ind##ind#else#nl#\
#ind##ind#{#nl#\
#ind##ind##ind#// ignore#nl#\
#ind##ind#}#nl#

ParseAttrXMLNS = #ind#// ignore#nl#

SimpleValidationDefaultReturn = #ind#return ParserError::SIMPLE_TYPE_VALIDATION_OK;#nl#

SimpleValidationDeleteValidationDataNoValidation = 

SimpleValidationGetCountStructMemberNoValidation = 0

SimpleValidationGetCountStructMemberValidation = &#ctv_data_struct_name#->#stv_count_struct_member#

SimpleValidationGetValidationDataNoValidation = 

SimpleValidationLength = #ind#if( #stv_length_value# != #stv_length# )#nl#\
#ind##ind#return ParserError::ERROR_VALIDATION_LENGTH;#nl#

SimpleValidationLengthStream = #ind#if( #stv_length_value# > #stv_length# )#nl#\
#ind##ind#return ParserError::ERROR_VALIDATION_LENGTH;#nl#

SimpleValidationLengthStreamEnd = #ind#if( #stv_length_value# != #stv_length# )#nl#\
#ind##ind#return ParserError::ERROR_VALIDATION_LENGTH;#nl#

SimpleValidationMaxExclusive = #ind#if( #stv_value# >= #stv_max_exclusive# )#nl#\
#ind##ind#return ParserError::ERROR_VALIDATION_MAX_EXCLUSIVE;#nl#

SimpleValidationMaxInclusive = #ind#if( #stv_value# > #stv_max_inclusive# )#nl#\
#ind##ind#return ParserError::ERROR_VALIDATION_MAX_INCLUSIVE;#nl#

SimpleValidationMaxLength = #ind#if( #stv_length_value# > #stv_max_length# )#nl#\
#ind##ind#return ParserError::ERROR_VALIDATION_MAX_LENGTH;#nl#

SimpleValidationMaxLengthStream = #ind#if( #stv_length_value# > #stv_max_length# )#nl#\
#ind##ind#return ParserError::ERROR_VALIDATION_MAX_LENGTH;#nl#

SimpleValidationMaxLengthStreamEnd = #ind#if( #stv_length_value# > #stv_max_length# )#nl#\
#ind##ind#return ParserError::ERROR_VALIDATION_MAX_LENGTH;#nl#

SimpleValidationMinExclusive = #ind#if( #stv_value# <= #stv_min_exclusive# )#nl#\
#ind##ind#return ParserError::ERROR_VALIDATION_MIN_EXCLUSIVE;#nl#

SimpleValidationMinInclusive = #ind#if( #stv_value# < #stv_min_inclusive# )#nl#\
#ind##ind#return ParserError::ERROR_VALIDATION_MIN_INCLUSIVE;#nl#

SimpleValidationMinLength = #ind#if( #stv_length_value# < #stv_min_length# )#nl#\
#ind##ind#return ParserError::ERROR_VALIDATION_MIN_LENGTH;#nl#

SimpleValidationMinLengthStream = 

SimpleValidationMinLengthStreamEnd = #ind#if( #stv_length_value# < #stv_min_length# )#nl#\
#ind##ind#return ParserError::ERROR_VALIDATION_MIN_LENGTH;#nl#

SimpleValidationNumericAtomicAttribute = #validation_block_open#\
#ind#ParserError::ErrorType simpleTypeValidationResult = #stv_function_name#(attributeData->#attrName#);#nl#\
#ind#if (simpleTypeValidationResult != ParserError::SIMPLE_TYPE_VALIDATION_OK)#nl#\
#ind#{#nl#\
#ind##ind#if( handleError(ParserError::SEVERITY_ERROR_NONCRITICAL,#nl#\
#ind##ind##ind#simpleTypeValidationResult,#nl#\
#ind##ind##ind##elementNameHash#,#nl#\
#ind##ind##ind##attrNameHash#,#nl#\
#ind##ind##ind#attributeValue) )#nl#\
#ind##ind#{#nl#\
#ind##ind##ind#return false;#nl#\
#ind##ind#}#nl#\
#ind#}#nl#\
#validation_block_close#

SimpleValidationNumericAtomicData = #validation_block_open#\
#ind#ParserError::ErrorType simpleTypeValidationResult = #stv_function_name#(parameter);#nl#\
#ind#if (simpleTypeValidationResult != ParserError::SIMPLE_TYPE_VALIDATION_OK)#nl#\
#ind#{#nl#\
#ind##ind#ParserChar msg[21];#nl#\
#ind##ind#Utils::fillErrorMsg(msg, ptrForErr, 20);#nl#\
#ind##ind#if( handleError(ParserError::SEVERITY_ERROR_NONCRITICAL,#nl#\
#ind##ind##ind#simpleTypeValidationResult,#nl#\
#ind##ind##ind#0,#nl#\
#ind##ind##ind#msg) )#nl#\
#ind##ind#{#nl#\
#ind##ind##ind#return false;#nl#\
#ind##ind#}#nl#\
#ind#}#nl#\
#validation_block_close#

SimpleValidationNumericListAttribute = #validation_block_open#\
#ind#ParserError::ErrorType simpleTypeValidationResult = #stv_function_name#(attributeData->#attrName#.data, attributeData->#attrName#.size);#nl#\
#ind#if (simpleTypeValidationResult != ParserError::SIMPLE_TYPE_VALIDATION_OK)#nl#\
#ind#{#nl#\
#ind##ind#if( handleError(ParserError::SEVERITY_ERROR_NONCRITICAL,#nl#\
#ind##ind##ind#simpleTypeValidationResult,#nl#\
#ind##ind##ind##elementNameHash#,#nl#\
#ind##ind##ind##attrNameHash#,#nl#\
#ind##ind##ind#attributeValue) )#nl#\
#ind##ind#{#nl#\
#ind##ind##ind#return false;#nl#\
#ind##ind#}#nl#\
#ind#}#nl#\
#validation_block_close#

SimpleValidationNumericListData = 

SimpleValidationNumericListDataEnd = 

SimpleValidationPattern = #stv_pcre_compiler_output#\
int ovector[ PCRE_OVECCOUNT ];#nl#\
int pcre_result = pcre_exec(#nl#\
#ind#pattern,#nl#\
#ind#0,#nl#\
#ind#value,#nl#\
#ind#(int)length,#nl#\
#ind#0,#nl#\
#ind#0,#nl#\
#ind#ovector,#nl#\
#ind#PCRE_OVECCOUNT);#nl#\
if (pcre_result < 0)#nl#\
#ind#return ParserError::ERROR_VALIDATION_PATTERN;#nl#

SimpleValidationSpecialStreamEndVali = #ind##ind#ParserError::ErrorType simpleTypeValidationResult = #stv_function_name#(0, (*(#stv_get_count_struct_member#)));#nl#

SimpleValidationSpecialStreamEndValiHandleError = #ind##ind#if (simpleTypeValidationResult != ParserError::SIMPLE_TYPE_VALIDATION_OK)#nl#\
#ind##ind#{#nl#\
#ind##ind##ind#if( handleError(ParserError::SEVERITY_ERROR_NONCRITICAL,#nl#\
#ind##ind##ind##ind#simpleTypeValidationResult,#nl#\
#ind##ind##ind##ind##elementNameHash#,#nl#\
#ind##ind##ind##ind#(ParserChar*)0, 0 ) )#nl#\
#ind##ind##ind#{#nl#\
#ind##ind##ind##ind#return false;#nl#\
#ind##ind##ind#}#nl#\
#ind##ind#}#nl#

SimpleValidationStringAtomicAttribute = #validation_block_open#\
#ind#ParserError::ErrorType simpleTypeValidationResult = #stv_function_name#(attributeData->#attrName#, strlen(attributeData->#attrName#));#nl#\
#ind#if (simpleTypeValidationResult != ParserError::SIMPLE_TYPE_VALIDATION_OK)#nl#\
#ind#{#nl#\
#ind##ind#if( handleError(ParserError::SEVERITY_ERROR_NONCRITICAL,#nl#\
#ind##ind##ind#simpleTypeValidationResult,#nl#\
#ind##ind##ind##elementNameHash#,#nl#\
#ind##ind##ind##attrNameHash#,#nl#\
#ind##ind##ind#attributeValue) )#nl#\
#ind##ind#{#nl#\
#ind##ind##ind#return false;#nl#\
#ind##ind#}#nl#\
#ind#}#nl#\
#validation_block_close#

SimpleValidationStringAtomicData = #validation_block_open#\
#ctv_get_vali_data#\
#stv_update_stream_count#\
#ind#ParserError::ErrorType simpleTypeValidationResult = #stv_function_name_stream#(text, #ctv_data_struct_name#->#stv_count_struct_member#);#nl#\
#ind#if (simpleTypeValidationResult != ParserError::SIMPLE_TYPE_VALIDATION_OK)#nl#\
#ind#{#nl#\
#ind##ind#ParserChar msg[21];#nl#\
#ind##ind#Utils::fillErrorMsg(msg, text, 20);#nl#\
#ind##ind#if( handleError(ParserError::SEVERITY_ERROR_NONCRITICAL,#nl#\
#ind##ind##ind#simpleTypeValidationResult,#nl#\
#ind##ind##ind#0,#nl#\
#ind##ind##ind#msg) )#nl#\
#ind##ind#{#nl#\
#ind##ind##ind#return false;#nl#\
#ind##ind#}#nl#\
#ind#}#nl#\
#validation_block_close#

SimpleValidationStringAtomicDataEnd = #ind#ParserError::ErrorType simpleTypeValidationResult = #stv_function_name_stream_end#(0, #ctv_data_struct_name#->#stv_count_struct_member#);#nl#\
#ind#if (simpleTypeValidationResult != ParserError::SIMPLE_TYPE_VALIDATION_OK)#nl#\
#ind#{#nl#\
#ind##ind#if( handleError(ParserError::SEVERITY_ERROR_NONCRITICAL,#nl#\
#ind##ind##ind#simpleTypeValidationResult,#nl#\
#ind##ind##ind#0,#nl#\
#ind##ind##ind#0) )#nl#\
#ind##ind#{#nl#\
#ind##ind##ind#return false;#nl#\
#ind##ind#}#nl#\
#ind#}#nl#

SimpleValidationStringListAttribute = #validation_block_open#\
#ind#ParserError::ErrorType simpleTypeValidationResult = #stv_function_name#(attributeData->#attrName#.data, attributeData->#attrName#.size);#nl#\
#ind#if (simpleTypeValidationResult != ParserError::SIMPLE_TYPE_VALIDATION_OK)#nl#\
#ind#{#nl#\
#ind##ind#if( handleError(ParserError::SEVERITY_ERROR_NONCRITICAL,#nl#\
#ind##ind##ind#simpleTypeValidationResult,#nl#\
#ind##ind##ind##elementNameHash#,#nl#\
#ind##ind##ind##attrNameHash#,#nl#\
#ind##ind##ind#attributeValue) )#nl#\
#ind##ind#{#nl#\
#ind##ind##ind#return false;#nl#\
#ind##ind#}#nl#\
#ind#}#nl#\
#validation_block_close#

SimpleValidationStringListItemImpl = {#nl#\
#ind#return #stv_function_name#( value.str, value.length );#nl#\
}#nl#

SimpleValidationUpdateStreamCount = #ind##ctv_data_struct_name#->#stv_count_struct_member# += textLength;#nl#

TypeMappingDefaultAttrAtomicXsd2cppRhs = attributeData->#attrName# =\ 

TypeMappingDefaultAttrListXsd2cppRhs = failed = !

TypeMappingDefaultDataAtomicConversion = #pre_data_atomic_xsd2cpp##nl#\
#data_atomic_xsd2cpp##nl#\
#post_data_atomic_xsd2cpp#

TypeMappingDefaultDataAtomicDataMethodImpl = if (!mLastIncompleteFragmentInCharacterData)#nl#\
{#nl#\
#ind#mLastIncompleteFragmentInCharacterData = (ParserChar*)mStackMemoryManager.newObject(textLength);#nl#\
#ind#memcpy(mLastIncompleteFragmentInCharacterData, text, textLength);#nl#\
#ind#mEndOfDataInCurrentObjectOnStack = mLastIncompleteFragmentInCharacterData + textLength;#nl#\
}#nl#\
else#nl#\
{#nl#\
#ind#ParserChar* tmp = (ParserChar*)mStackMemoryManager.growObject(textLength);#nl#\
#ind#if ( tmp != mLastIncompleteFragmentInCharacterData ) {#nl#\
#ind##ind#mEndOfDataInCurrentObjectOnStack = (mEndOfDataInCurrentObjectOnStack - mLastIncompleteFragmentInCharacterData) + tmp;#nl#\
#ind##ind#mLastIncompleteFragmentInCharacterData = tmp;#nl#\
#ind#}#nl#\
#ind#memcpy(mEndOfDataInCurrentObjectOnStack, text, textLength);#nl#\
#ind#mEndOfDataInCurrentObjectOnStack += textLength;#nl#\
}#nl#\
return true;

TypeMappingDefaultDataAtomicValidateEndFacetPattern = bool returnValue = true;#nl#\
#validation_block_open#\
ParserError::ErrorType simpleTypeValidationResult = #stv_function_name#(mLastIncompleteFragmentInCharacterData, mEndOfDataInCurrentObjectOnStack - mLastIncompleteFragmentInCharacterData);#nl#\
if (simpleTypeValidationResult != ParserError::SIMPLE_TYPE_VALIDATION_OK)#nl#\
{#nl#\
#ind#ParserChar msg[21];#nl#\
#ind#Utils::fillErrorMsg(msg, mLastIncompleteFragmentInCharacterData, 20);#nl#\
#ind#if( handleError(ParserError::SEVERITY_ERROR_NONCRITICAL,#nl#\
#ind##ind#simpleTypeValidationResult,#nl#\
#ind##ind#0,#nl#\
#ind##ind#msg) )#nl#\
#ind#{#nl#\
#ind##ind#returnValue =  false;#nl#\
#ind#}#nl#\
}#nl#\
if (!returnValue)#nl#\
{#nl#\
#ind#mStackMemoryManager.deleteObject();#nl#\
#ind#mLastIncompleteFragmentInCharacterData = 0;#nl#\
#ind#mEndOfDataInCurrentObjectOnStack = 0;#nl#\
#ind#return returnValue;#nl#\
}#nl#\
#validation_block_close#\
returnValue = #mimpl#->#dataMethod#(mLastIncompleteFragmentInCharacterData, mEndOfDataInCurrentObjectOnStack - mLastIncompleteFragmentInCharacterData);#nl#\
mStackMemoryManager.deleteObject();#nl#\
mLastIncompleteFragmentInCharacterData = 0;#nl#\
mEndOfDataInCurrentObjectOnStack = 0;#nl#\
return returnValue;#nl#

TypeMappingDefaultDataAtomicXsd2cppRhs = #cppAtomicType# parameter =\ 

TypeMappingDefaultDataListXsd2cppLhs = (text, textLength, &#className#::#dataMethod#);

TypeMappingDefaultDataListXsd2cppValidationLhs = (text, textLength, &#className#::#dataMethod#, #stv_function_name_stream#, #stv_get_count_struct_member#, #stv_item_type_vali_func#);

TypeMappingDefaultEnumSringAttrAtomicXsd2cpp = #tm_default_attr_atomic_xsd2cpp_rhs#\
Utils::toEnum<#enum_cpp_type_name#, StringHash, #enum_count#>(attributeValue, failed, #enum_map_name#, Utils::calculateStringHash);

TypeMappingDefaultEnumSringDataAtomicXsd2cpp = #tm_default_data_atomic_xsd2cpp_rhs#\
Utils::toEnum<#enum_cpp_type_name#, StringHash, #enum_count#>((const ParserChar**)&mLastIncompleteFragmentInCharacterData, mEndOfDataInCurrentObjectOnStack, failed, #enum_map_name#, Utils::calculateStringHash);

TypeMappingDefaultEnumSringDataListDataend = return #enum_func_data_end#(&#className#::#dataMethod#, #enum_map_name#, &Utils::calculateStringHash, #enum_func_to_enum#);

TypeMappingDefaultEnumSringDataListXsd2cpp = return #enum_func_char_data#(text, textLength, &#className#::#dataMethod#, &Utils::calculateStringHash);

TypeMappingDefaultSringDataXsd2cpp = #simple_type_validation##nl#return #mimpl#->#dataMethod#(text, textLength);

TypeMappingDefaultPostAttrAtomicXsd2cpp = if ( failed && handleError(ParserError::SEVERITY_ERROR_NONCRITICAL,#nl#\
#ind##ind#ParserError::ERROR_ATTRIBUTE_PARSING_FAILED,#nl#\
#ind##ind##elementNameHash#,#nl#\
#ind##ind##attrNameHash#,#nl#\
#ind##ind#attributeValue))#nl#\
{#nl#\
#ind#return false;#nl#\
}#nl#\
#simple_type_validation#

TypeMappingDefaultPostDataAtomicXsd2cpp = bool returnValue;#nl#\
if (!failed)#nl#\
{#nl#\
#simple_type_validation#\
#ind#returnValue = #mimpl#->#dataMethod#(parameter);#nl#\
}#nl#\
else#nl#\
#ind#returnValue = !handleError(ParserError::SEVERITY_ERROR_NONCRITICAL, ParserError::ERROR_TEXTDATA_PARSING_FAILED, #elementNameHash#, (const ParserChar*)0, mLastIncompleteFragmentInCharacterData);#nl#\
if (mLastIncompleteFragmentInCharacterData)#nl#\
#ind#mStackMemoryManager.deleteObject();#nl#\
mLastIncompleteFragmentInCharacterData = 0;#nl#\
mEndOfDataInCurrentObjectOnStack = 0;#nl#\
return returnValue;

TypeMappingDefaultPreAttrAtomicXsd2cpp = bool failed;

TypeMappingDefaultPreDataAtomicXsd2cpp = bool failed;#nl#const ParserChar* ptrForErr = mLastIncompleteFragmentInCharacterData;#nl#DISABLE_WARNING_UNUSED(ptrForErr)

TypeMappingDefaultUnionDataAtomicXsd2cppRhs = #union_cpp_type_name# parameter =\ 

UnionAttributeAtomicConversion = #union_attr_atomic_pre_xsd2cpp##nl#\
#union_attr_atomic_xsd2cpp##nl#\
#union_attr_atomic_post_xsd2cpp##nl#\
#attr_present_set#

UnionAttributeAtomicPostXsd2Cpp = #tm_default_post_attr_atomic_xsd2cpp#

UnionAttributeAtomicPreXsd2Cpp = #tm_default_pre_attr_atomic_xsd2cpp#

UnionAttributeAtomicXsd2Cpp = #tm_default_attr_atomic_xsd2cpp_rhs#\
#union_func_to_union#(attributeValue, strlen(attributeValue), failed);

UnionAttributeListType = XSList<#union_cpp_type_name#>

UnionAttributeListTypeConversionItemValidation = #tm_default_attr_list_xsd2cpp_rhs#\
characterData2List<#union_cpp_type_name#, #union_func_to_union#>(attributeValue, attributeData->#attrName#, #stv_item_type_vali_func#, #elementNameHash#, #attrNameHash#);

UnionAttributeListTypeConversionNoItemValidation = #tm_default_attr_list_xsd2cpp_rhs#\
characterData2List<#union_cpp_type_name#, #union_func_to_union#>(attributeValue, attributeData->#attrName#);

UnionDataAtomicConversion = #union_data_atomic_pre_xsd2cpp##nl#\
#union_data_atomic_xsd2cpp##nl#\
#union_data_atomic_post_xsd2cpp##nl#

UnionDataAtomicDataMethod = #union_data_atomic_data_method_impl#

UnionDataAtomicDataMethodImpl = #tm_default_data_atomic_data_method_impl#

UnionDataAtomicPostXsd2Cpp = #tm_default_post_data_atomic_xsd2cpp#

UnionDataAtomicPreXsd2Cpp = #tm_default_pre_data_atomic_xsd2cpp#

UnionDataAtomicXsd2Cpp = #tm_default_union_data_atomic_xsd2cpp_rhs#\
#union_func_to_union#( mLastIncompleteFragmentInCharacterData, (size_t)(mEndOfDataInCurrentObjectOnStack - mLastIncompleteFragmentInCharacterData), failed );

UnionDataListEnd = return dataEnd<#union_cpp_type_name#, #union_func_to_union#>( &#className#::#dataMethod# );

UnionDataListEndValidation = bool returnValue = dataEnd<#union_cpp_type_name#, #union_func_to_union#>( &#className#::#dataMethod#, #stv_function_name_stream_end#, #stv_get_count_struct_member#, #stv_item_type_vali_func# );

UnionDataListType = const #union_cpp_type_name#*

UnionDataListTypeConversion = return characterData2Data<#union_cpp_type_name#, #union_func_to_union#>\
(text, textLength, &#private_class_name#::#union_func_data_prefix#, &#className#::#dataMethod#);

UnionDataListTypeConversionValidation = return characterData2Data<#union_cpp_type_name#, #union_func_to_union#>\
(text, textLength, &#private_class_name#::#union_func_data_prefix#, &#className#::#dataMethod#, #stv_function_name_stream#, #stv_get_count_struct_member#, #stv_item_type_vali_func#);

UnionEnumMemberConversion = Utils::toEnum<#enum_cpp_type_name#, #union_enum_base_type#, #enum_count#>

UnionFuncDataPrefixDecl = #union_cpp_type_name# #union_func_data_prefix# (#nl#\
#ind#const ParserChar* prefixedBuffer,#nl#\
#ind#const ParserChar* prefixedBufferEnd,#nl#\
#ind#const ParserChar** buffer,#nl#\
#ind#const ParserChar* bufferEnd,#nl#\
#ind#bool& failed#nl#\
);#nl#

UnionFuncDataPrefixImpl = #union_cpp_type_name# #private_class_name#::#union_func_data_prefix# (#nl#\
#ind#const ParserChar* prefixedBuffer,#nl#\
#ind#const ParserChar* prefixedBufferEnd,#nl#\
#ind#const ParserChar** buffer,#nl#\
#ind#const ParserChar* bufferEnd,#nl#\
#ind#bool& failed#nl#\
)#nl#\
{#nl#\
#ind#return toDataPrefix<#union_cpp_type_name#>(prefixedBuffer, prefixedBufferEnd, buffer, bufferEnd, failed, #union_func_to_union#);#nl#\
}

UnionFuncToUnionBufferEndPtrDecl = #union_cpp_type_name# #union_func_to_union# ( const ParserChar** buffer, const ParserChar* bufferEnd, bool& failed );#nl#

UnionFuncToUnionBufferEndPtrImpl = #union_cpp_type_name# #union_func_to_union# ( const ParserChar** buffer, const ParserChar* bufferEnd, bool& failed )#nl#\
{#nl#\
#ind#ParserString tmp = Utils::toStringListItem( buffer, bufferEnd, failed );#nl#\
#ind#return #union_func_to_union#( tmp.str, tmp.length, failed );#nl#\
}#nl#

UnionFuncToUnionDecl = #union_cpp_type_name# #union_func_to_union# ( const ParserChar* buffer, size_t length, bool& failed );#nl#

UnionFuncToUnionImpl = #union_cpp_type_name# #union_func_to_union# ( const ParserChar* buffer, size_t length, bool& failed )#nl#\
{#nl#\
#ind##union_cpp_type_name# returnValue;#nl#\
#ind#const ParserChar* tmpBuf;#nl##nl#\
#union_to_union_per_member#\
#nl##ind#returnValue.#union_type_member_name# = #union_cpp_type_name#::INVALID;#nl#\
#ind#return returnValue;#nl#\
}#nl#

UnionFuncToUnionNullTermiDecl = #union_cpp_type_name# #union_func_to_union# ( const ParserChar** buffer, bool& failed );#nl#

UnionFuncToUnionNullTermiImpl = #union_cpp_type_name# #union_func_to_union# ( const ParserChar** buffer, bool& failed )#nl#\
{#nl#\
#ind#ParserString tmp = Utils::toStringListItem( buffer, failed );#nl#\
#ind#return #union_func_to_union#( tmp.str, tmp.length, failed );#nl#\
}#nl#

UnionFuncToUnionPerMember = #ind#tmpBuf = buffer;#nl#\
#ind##union_member_cpp_type# #union_member_tmp_var# = #union_member_conversion_func_name#( #union_member_conversion_func_paras# );#nl#\
#ind#if( !failed )#nl#\
#ind#{#nl#\
#ind##ind#returnValue.#union_type_member_name# = #union_cpp_type_name#::#union_member_type_enum#;#nl#\
#ind##ind#returnValue.#union_data_member_name#.#union_member_type_enum# = #union_member_tmp_var#;#nl#\
#ind##ind#return returnValue;#nl#\
#ind#}#nl##nl#

UnionMemberTypeConversionFunctionParametersEnumAddon = , #enum_map_name#, #union_enum_base_func#

ValidateBeginPostSwitch = #ind#}#nl#\
}#nl#\
#attr_init_objects#\
#attr_check_required_present#

ValidateBeginPreSwitch = #attr_struct_name#* attributeData = newData<#attr_struct_name#>(attributeDataPtr);#nl#\
#nl#\
const ParserChar** attributeArray = attributes.attributes;#nl#\
if ( attributeArray )#nl#\
{#nl#\
#ind#while (true)#nl#\
#ind#{#nl#\
#ind##ind#const ParserChar * attribute = *attributeArray;#nl#\
#ind##ind#if ( !attribute )#nl#\
#ind##ind##ind#break;#nl#\
#ind##ind#StringHash hash = GeneratedSaxParser::Utils::calculateStringHash(attribute);#nl#\
#ind##ind#attributeArray++;#nl#\
#ind##ind#if ( !attributeArray )#nl#\
#ind##ind##ind#return false;#nl#\
#ind##ind#const ParserChar* attributeValue = *attributeArray;#nl#\
#ind##ind#attributeArray++;#nl#

ValidateBeginSwitchDefault = #ind##ind#if ( handleError(ParserError::SEVERITY_ERROR_NONCRITICAL, ParserError::ERROR_UNKNOWN_ATTRIBUTE, #elementNameHash#, attribute, attributeValue))#nl#\
#ind##ind##ind#{return false;}

ValidateBeginSwitchDefaultUnknownAttributes = #ind##ind#if ( !attributeData->#unknwonAttrName#.data )#nl#\
#ind##ind##ind#attributeData->#unknwonAttrName#.data = (const ParserChar**)mStackMemoryManager.newObject( 2 * sizeof( #unknwonAttrType# ) );#nl#\
#ind##ind#else#nl#\
#ind##ind##ind#attributeData->#unknwonAttrName#.data = (const ParserChar**)mStackMemoryManager.growObject( 2 * sizeof( #unknwonAttrType# ) );#nl#\
#ind##ind#attributeData->#unknwonAttrName#.data[ attributeData->#unknwonAttrName#.size ] = attribute;#nl#\
#ind##ind#attributeData->#unknwonAttrName#.data[ attributeData->#unknwonAttrName#.size+1 ] = attributeValue;#nl#\
#ind##ind#attributeData->#unknwonAttrName#.size += 2;#nl#
